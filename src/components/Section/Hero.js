import React, {Component} from "react";
import styled from "styled-components";
import HeroAnimation from "../Pictures/HeroAnimation";
import TestAnimation from "../Pictures/TestAnimation";
import anime from 'animejs';
import central_picture from "../../pictures/final.png"


// autogenerated class name using styled-components, to be used 
// still, not high performance cf. https://zhenyong.github.io/react/tips/inline-styles.html
// maybe it is not ? https://blog.primehammer.com/the-performance-of-styled-react-components/
// quote__If your priority is the speed, glamorous or styled-components is exactly what you could use in your web apps
// good ref : https://medium.com/styled-components/styled-components-getting-started-c9818acbcbbd


const Section = styled.section`
    padding-top: 3rem;
    position: relative;
    @media (min-width: 600px) {
        padding-top: 4rem;
        padding-bottom: 240px;
    }

    @media (min-width: 1250px) {
        padding-top: 3rem;
        padding-bottom: 0px;
    }

`

const One = styled.div`
    height: 79px;
    @media (min-width: 600px) {
        height: 96px;
    }
    @media (min-width: 1250px) {
        height: 113px;
    }
`

const Two = styled.div`
    position: absolute;
    height: 100%;
    width: 100%;
    z-index: -10;
    top: 0;
    background: linear-gradient(to bottom, #f0f4f7 0, #fff 49%, #fff 100%);
`;

const Three = styled.div`
    position: relative;
    padding-left: 97px;
    padding-right: 97px;
    max-width: 1920px;
    margin: 0 auto;
    width: 100%;
    display: inline-grid;

    @media (min-width: 600px) {
        padding-left: 48px;
        padding-right: 48px;
        height: 370px;
    }
    @media (min-width: 1250px) {
        display: inline-flex;
        height: 540px;
        padding-left: 97px;
        padding-right: 97px;
    }
`;

const DivText = styled.div `
    max-width: 530px;
    position: relative;
    z-index: 10;
    padding: 0 5%;
    padding-bottom: 2rem;
    @media (min-width: 600px) {
        max-width: unset;
        text-align: center;
    }
    @media (min-width: 1250px) {
        padding-bottom: 0rem;
        text-align: left;
        height: 595px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        -webkit-box-align: start;
        -ms-flex-align: start;
        align-items: start;
        width: 50%;        
}
`

const MainTitle = styled.h1 `
    padding-right: 9%;
    @media (min-width: 600px) {
        font-size: 1.953rem;
        margin-left: auto;
        margin-right: auto;
        padding: 0 20px;
    }
    @media (min-width: 1250px) {
        margin-left: 0;
        margin-right: 0;
        padding: 0;
    }
`

const SubTitle = styled.p `
    max-width: 800px;
    line-height: 1.6;
    color: #2d424d;
    font-size: 1rem;
    @media (min-width: 600px) {
        margin-left: auto;
        margin-right: auto;
    }
    @media (min-width: 1250px) {
        margin-left: 0;
        margin-right: 0;
    }
`

const ButtonCenter = styled.div `
    display: inline-block;
    font-weight: 600;
    background: red;
    color: #FFF;
    border-radius: 4px;
    padding: 0.895em;
    cursor: pointer;
    position: relative;
    margin-top: 1.7rem;
    transition: opacity 300ms ease-out;
    &:hover {
        box-shadow: 0 1px 20px 0 rgb(23,28,33, 0.2);
        }
`

const DivImage = styled.div `
        
    position: relative; 
    z-index: 10;
    padding: 0 5%;
    float: right;

    /* Firefox */
    display: -moz-box;
    -moz-box-pack: center;
    -moz-box-align: center;

    /* Safari and Chrome */
    display: -webkit-box;
    -webkit-box-pack: center;
    -webkit-box-align: center;

    /* W3C */
    display: box;
    box-pack: center;
    box-align: center;

    @media (min-width: 600px) {
        max-width: 60%;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
    }
    @media (min-width: 1250px) {
        height: 540px;
        width: 50%;     
        max-width: 530px;
    }   
`  

const CentralImage = styled.div `
    padding: 20px;
    float: top;
    margin-bottom: 10rem;
    box-shadow: 0 1px 20px 0 rgb(23,28,33, 0.2);
    /*box-shadow: 0 1px 13px 0 rgba(0,0,0,0.1);*/
    border-radius: 6px;
    border-top-left-radius: 6px;
`

const Img = styled.img `
    border: ${props => props.border};
    border-radius: 4px;
    padding: 12px;
`

const DivDeal = styled.div `
    margin-top: 1.2rem;
    margin-left: auto;
    margin-right: auto;
    max-width: 60%;
    display: flex;

`

const DealDay = styled.span `
    text-transform: uppercase;
    text-decoration: none;
    text-align: left;
    font-size: 12px;
    color: #FFF;
    background: #C45500;
    font-weight: 700;
    padding: 0 5px;
    vertical-align: middle;
    white-space: nowrap;
    display: inline-block;
    float: left;
    border: ${props => props.border};
    border-radius: 4px;
    margin-bottom: 6px;

`

const DivPrice = styled.div `
    margin-top: 0;
    margin-left: auto;
    margin-right: auto;
    max-width: 60%;
    display: flex;
`

const SpanPrice = styled.span `
    font-size: 20px;
    line-height: 1;
    border: ${props => props.border};
    border-radius: 4px;
`

const DivTime = styled(DivPrice) `
`

const SpanTime = styled.span `
    font-size: 11px;
    line-height: 1;
    color: #555;
    border: ${props => props.border};
    border-radius: 4px;
`

const DivTitle = styled(DivPrice) `
`

const SpanTitle = styled.a `
    font-size: 14px;
    line-height: 19px;
    color: #0066c0;
    border: ${props => props.border};
    border-radius: 4px;
    &:hover {
        color: #c45500;
        cursor: pointer;
        text-decoration: underline;
    }
`

const DivStars = styled(DivTitle) `
`

const DivDivStars = styled.div `
    display: inline-block;
    border: ${props => props.border};
    border-radius: 4px;
`

const SpanNbComments = styled.span `
    font-size: 13px;
    line-height: 1.5;
    color: #111;
    margin-left: 5px;
`


class Hero extends Component {
    constructor(props) {
        super(props);
        this.state = {
            isHoverImg: false, 
            isHoverDeal: false, 
            isHoverPrice: false,
            isHoverTime: false,
            isHoverTitle: false,
            isHoverStars: false,
            
            isClickImg: 0,
            isClickDeal: 0, 
            isClickPrice: 0,
            isClickTime: 0,
            isClickTitle: 0,
            isClickStars: 0,

            date: new Date()
        };
        this.handleHoverImg = this.handleHoverImg.bind(this);
        this.handleClickImg = this.handleClickImg.bind(this);
        this.handleBorderImg = this.handleBorderImg.bind(this);

        this.handleHoverDeal = this.handleHoverDeal.bind(this);
        this.handleClickDeal = this.handleClickDeal.bind(this);
        this.handleBorderDeal = this.handleBorderDeal.bind(this);

        this.handleHoverPrice = this.handleHoverPrice.bind(this);
        this.handleClickPrice = this.handleClickPrice.bind(this);
        this.handleBorderPrice = this.handleBorderPrice.bind(this);

        this.handleHoverTime = this.handleHoverTime.bind(this);
        this.handleClickTime = this.handleClickTime.bind(this);
        this.handleBorderTime = this.handleBorderTime.bind(this);

        this.handleHoverTitle = this.handleHoverTitle.bind(this);
        this.handleClickTitle = this.handleClickTitle.bind(this);
        this.handleBorderTitle = this.handleBorderTitle.bind(this);

        this.handleHoverStars = this.handleHoverStars.bind(this);
        this.handleClickStars = this.handleClickStars.bind(this);
        this.handleBorderStars = this.handleBorderStars.bind(this);

        this.tick = this.tick.bind(this);
        this.getMinutes = this.getMinutes.bind(this)
        this.getSeconds = this.getSeconds.bind(this)
        this.getHours = this.getHours.bind(this)
    }  

    tick() {
        this.setState({date: new Date(2018, 11, 21, this.state.date.getHours(), this.state.date.getMinutes(), this.state.date.getSeconds() - 1)})
    }

    getMinutes() {
        return this.state.date.getMinutes();
    }

    getSeconds() {
        return this.state.date.getSeconds();
    }

    getHours() {
        return this.state.date.getHours();
    }

    componentDidMount() {
        this.interval = setInterval(this.tick, 1000)
        }
    
    handleHoverImg() {
        this.setState({isHoverImg: !this.state.isHoverImg})
    }

    handleClickImg() {
        if (this.state.isClickImg == 0) {
            this.setState({isClickImg: 1})
        } else {
            this.setState({isClickImg: 0})

        }
    }

    handleBorderImg() {
        if(this.state.isClickImg == 0) {
            if (this.state.isHoverImg) {
                return '4px solid rgba(0,0,0,.5)'
            } else {
                return '4px solid rgba(0,0,0,0)'
            }
        } else {
            return '4px solid rgba(255,0,0,1)'
        }
    }

    handleHoverDeal() {
        this.setState({isHoverDeal: !this.state.isHoverDeal})
    }

    handleClickDeal() {
        if (this.state.isClickDeal == 0) {
            this.setState({isClickDeal: 1})
        } else {
            this.setState({isClickDeal: 0})

        }
    }

    handleBorderDeal() {
        if(this.state.isClickDeal == 0) {
            if (this.state.isHoverDeal) {
                return '4px solid rgba(0,0,0,.5)'
            } else {
                return '4px solid rgba(0,0,0,0)'
            }
        } else {
            return '4px solid rgba(255,0,0,1)'
        }
    }

    handleHoverPrice() {
        this.setState({isHoverPrice: !this.state.isHoverPrice})
    }

    handleClickPrice() {
        if (this.state.isClickPrice == 0) {
            this.setState({isClickPrice: 1})
        } else {
            this.setState({isClickPrice: 0})

        }
    }

    handleBorderPrice() {
        if(this.state.isClickPrice == 0) {
            if (this.state.isHoverPrice) {
                return '4px solid rgba(0,0,0,.5)'
            } else {
                return '4px solid rgba(0,0,0,0)'
            }
        } else {
            return '4px solid rgba(255,0,0,1)'
        }
    }

    handleHoverTime() {
        this.setState({isHoverTime: !this.state.isHoverTime})
    }

    handleClickTime() {
        if (this.state.isClickTime == 0) {
            this.setState({isClickTime: 1})
        } else {
            this.setState({isClickTime: 0})

        }
    }

    handleBorderTime() {
        if(this.state.isClickTime == 0) {
            if (this.state.isHoverTime) {
                return '4px solid rgba(0,0,0,.5)'
            } else {
                return '4px solid rgba(0,0,0,0)'
            }
        } else {
            return '4px solid rgba(255,0,0,1)'
        }
    }

    handleHoverTitle() {
        this.setState({isHoverTitle: !this.state.isHoverTitle})
    }

    handleClickTitle() {
        if (this.state.isClickTitle == 0) {
            this.setState({isClickTitle: 1})
        } else {
            this.setState({isClickTitle: 0})

        }
    }

    handleBorderTitle() {
        if(this.state.isClickTitle == 0) {
            if (this.state.isHoverTitle) {
                return '4px solid rgba(0,0,0,.5)'
            } else {
                return '4px solid rgba(0,0,0,0)'
            }
        } else {
            return '4px solid rgba(255,0,0,1)'
        }
    }

    handleHoverStars() {
        this.setState({isHoverStars: !this.state.isHoverStars})
    }

    handleClickStars() {
        if (this.state.isClickStars == 0) {
            this.setState({isClickStars: 1})
        } else {
            this.setState({isClickStars: 0})

        }
    }

    handleBorderStars() {
        if(this.state.isClickStars == 0) {
            if (this.state.isHoverStars) {
                return '4px solid rgba(0,0,0,.5)'
            } else {
                return '4px solid rgba(0,0,0,0)'
            }
        } else {
            return '4px solid rgba(255,0,0,1)'
        }
    }


    render() {
        return(
            <Section>
                <One></One>
                <Two></Two>
                <Three>
                    <DivText>
                        <MainTitle>We scrape the data you need</MainTitle>
                        <SubTitle>We extract data from the web for data-driven businesses all around the world.
                            Cost-killing price, cut-of-the-edge python technology, light speed delivery.
                            </SubTitle>
                            <a href="#form"><ButtonCenter>Get started</ButtonCenter></a>
                    </DivText>
                    <DivImage className='ba' onClick={this.handleClick}> 
                        <CentralImage>
                            <Img src={central_picture} alt='' width="60%" border={this.handleBorderImg} onMouseEnter={this.handleHoverImg} onMouseLeave={this.handleHoverImg} onClick={this.handleClickImg}/>
                            <DivDeal>
                                <DealDay border={this.handleBorderDeal} onMouseEnter={this.handleHoverDeal} onMouseLeave={this.handleHoverDeal} onClick={this.handleClickDeal}>DEAL OF THE DAY</DealDay>
                            </DivDeal>
                            <DivPrice>
                                <SpanPrice border={this.handleBorderPrice} onMouseEnter={this.handleHoverPrice} onMouseLeave={this.handleHoverPrice} onClick={this.handleClickPrice}>$4.19 - $6.27</SpanPrice>
                            </DivPrice>
                            <DivTime>
                                <SpanTime border={this.handleBorderTime} onMouseEnter={this.handleHoverTime} onMouseLeave={this.handleHoverTime} onClick={this.handleClickTime}>Ends in {this.getHours()}:{this.getMinutes()}:{this.getSeconds()}</SpanTime>
                            </DivTime>
                            <DivTitle>
                                <SpanTitle border={this.handleBorderTitle} onMouseEnter={this.handleHoverTitle} onMouseLeave={this.handleHoverTitle} onClick={this.handleClickTitle}>Cool Puppet You Want To Scrape 🎅</SpanTitle>
                            </DivTitle>
                            <DivStars >
                            <DivDivStars border={this.handleBorderStars} onMouseEnter={this.handleHoverStars} onMouseLeave={this.handleHoverStars} onClick={this.handleClickStars}>
                                <svg width="80px" viewBox="0 0 103 18">
                                    <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd" width="80%">
                                        <polygon id="Star" stroke="#DD9A2D" fill="#F7C033" points="9.5 14.25 3.9160401 17.1856614 4.98248155 10.9678307 0.464963095 6.56433855 6.70802005 5.65716928 9.5 0 12.2919799 5.65716928 18.5350369 6.56433855 14.0175185 10.9678307 15.0839599 17.1856614"></polygon>
                                        <polygon id="Star" stroke="#DD9A2D" fill="#F7C033" points="30.5 14.25 24.9160401 17.1856614 25.9824815 10.9678307 21.4649631 6.56433855 27.7080201 5.65716928 30.5 0 33.2919799 5.65716928 39.5350369 6.56433855 35.0175185 10.9678307 36.0839599 17.1856614"></polygon>
                                        <polygon id="Star" stroke="#DD9A2D" fill="#F7C033" points="51.5 14.25 45.9160401 17.1856614 46.9824815 10.9678307 42.4649631 6.56433855 48.7080201 5.65716928 51.5 0 54.2919799 5.65716928 60.5350369 6.56433855 56.0175185 10.9678307 57.0839599 17.1856614"></polygon>
                                        <polygon id="Star" stroke="#DD9A2D" fill="#F7C033" points="72.5 14.25 66.9160401 17.1856614 67.9824815 10.9678307 63.4649631 6.56433855 69.7080201 5.65716928 72.5 0 75.2919799 5.65716928 81.5350369 6.56433855 77.0175185 10.9678307 78.0839599 17.1856614"></polygon>
                                        <polygon id="Star" stroke="#DD9A2D" points="93.5 14.25 87.9160401 17.1856614 88.9824815 10.9678307 84.4649631 6.56433855 90.7080201 5.65716928 93.5 0 96.2919799 5.65716928 102.535037 6.56433855 98.0175185 10.9678307 99.0839599 17.1856614"></polygon>
                                    </g>
                                </svg>
                                <SpanNbComments>
                                    79
                                </SpanNbComments>
                            </DivDivStars>
                            </DivStars>
                        </CentralImage>
                    </DivImage>
                </Three>
                    
            </Section>
        )
    }
};

export default Hero;